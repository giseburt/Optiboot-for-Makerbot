
optiboot_ec3x.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f2  00003e00  00003e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000006a  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000236  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000178  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003cd  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000a54  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000125  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001ce  00000000  00000000  00000c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000080  00000000  00000000  00000dd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003e00 <main>:
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    3e00:	82 e0       	ldi	r24, 0x02	; 2
    3e02:	80 93 c0 00 	sts	0x00C0, r24
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
#endif
#ifndef SOFT_UART
  UCSR0A = _BV(U2X0); //Double speed mode USART0
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    3e06:	88 e1       	ldi	r24, 0x18	; 24
    3e08:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    3e0c:	86 e0       	ldi	r24, 0x06	; 6
    3e0e:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    3e12:	80 e1       	ldi	r24, 0x10	; 16
    3e14:	80 93 c4 00 	sts	0x00C4, r24
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    3e18:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    3e1a:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
    3e1c:	81 ff       	sbrs	r24, 1
    3e1e:	d6 d0       	rcall	.+428    	; 0x3fcc <appStart>

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_500MS);
    3e20:	8d e0       	ldi	r24, 0x0D	; 13
    3e22:	ce d0       	rcall	.+412    	; 0x3fc0 <watchdogConfig>
  DDRC |= _BV(1);
  DDRD &= ~_BV(PIND0);
#else
#if defined(EXTRUDER_CONTROLLER_V3X)
	// Bring MOSFETs and motor driver low before too much time has passed
	PORTB &= ~_BV(1) & ~_BV(2);
    3e24:	85 b1       	in	r24, 0x05	; 5
    3e26:	89 7f       	andi	r24, 0xF9	; 249
    3e28:	85 b9       	out	0x05, r24	; 5
	DDRB |= _BV(1) | _BV(2) | /* LED pin: */_BV(LED);
    3e2a:	84 b1       	in	r24, 0x04	; 4
    3e2c:	86 62       	ori	r24, 0x26	; 38
    3e2e:	84 b9       	out	0x04, r24	; 4
	PORTD &= ~_BV(5) & ~_BV(6);
    3e30:	8b b1       	in	r24, 0x0b	; 11
    3e32:	8f 79       	andi	r24, 0x9F	; 159
    3e34:	8b b9       	out	0x0b, r24	; 11
	DDRD |= _BV(5) | _BV(6);
    3e36:	8a b1       	in	r24, 0x0a	; 10
    3e38:	80 66       	ori	r24, 0x60	; 96
    3e3a:	8a b9       	out	0x0a, r24	; 10
  to supress line noise that prevents the bootloader from
  timing out (DAM: 20070509) */
#if !defined(NO_RX_PULLUP)
  PORTD |= _BV(PIND0);
#else
  PORTD &= ~_BV(PIND0);
    3e3c:	58 98       	cbi	0x0b, 0	; 11
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    3e3e:	cc 24       	eor	r12, r12
    3e40:	c3 94       	inc	r12
        addrPtr += 2;
      } while (--ch);
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    3e42:	b5 e0       	ldi	r27, 0x05	; 5
    3e44:	eb 2e       	mov	r14, r27
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    3e46:	a1 e1       	ldi	r26, 0x11	; 17
    3e48:	da 2e       	mov	r13, r26
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    3e4a:	f3 e0       	ldi	r31, 0x03	; 3
    3e4c:	ff 2e       	mov	r15, r31
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    3e4e:	a9 d0       	rcall	.+338    	; 0x3fa2 <getch>

    if(ch == STK_GET_PARAMETER) {
    3e50:	81 34       	cpi	r24, 0x41	; 65
    3e52:	21 f4       	brne	.+8      	; 0x3e5c <main+0x5c>
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	c5 d0       	rcall	.+394    	; 0x3fe2 <verifySpace+0xc>
      putch(0x03);
    3e58:	83 e0       	ldi	r24, 0x03	; 3
    3e5a:	20 c0       	rjmp	.+64     	; 0x3e9c <main+0x9c>
    }
    else if(ch == STK_SET_DEVICE) {
    3e5c:	82 34       	cpi	r24, 0x42	; 66
    3e5e:	11 f4       	brne	.+4      	; 0x3e64 <main+0x64>
      // SET DEVICE is ignored
      getNch(20);
    3e60:	84 e1       	ldi	r24, 0x14	; 20
    3e62:	03 c0       	rjmp	.+6      	; 0x3e6a <main+0x6a>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    3e64:	85 34       	cpi	r24, 0x45	; 69
    3e66:	19 f4       	brne	.+6      	; 0x3e6e <main+0x6e>
      // SET DEVICE EXT is ignored
      getNch(5);
    3e68:	85 e0       	ldi	r24, 0x05	; 5
    3e6a:	bb d0       	rcall	.+374    	; 0x3fe2 <verifySpace+0xc>
    3e6c:	8f c0       	rjmp	.+286    	; 0x3f8c <main+0x18c>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    3e6e:	85 35       	cpi	r24, 0x55	; 85
    3e70:	81 f4       	brne	.+32     	; 0x3e92 <main+0x92>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    3e72:	97 d0       	rcall	.+302    	; 0x3fa2 <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    3e74:	08 2f       	mov	r16, r24
    3e76:	10 e0       	ldi	r17, 0x00	; 0
    3e78:	94 d0       	rcall	.+296    	; 0x3fa2 <getch>
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	98 2f       	mov	r25, r24
    3e7e:	88 27       	eor	r24, r24
    3e80:	80 2b       	or	r24, r16
    3e82:	91 2b       	or	r25, r17
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    3e84:	88 0f       	add	r24, r24
    3e86:	99 1f       	adc	r25, r25
      address = newAddress;
    3e88:	90 93 01 02 	sts	0x0201, r25
    3e8c:	80 93 00 02 	sts	0x0200, r24
    3e90:	7c c0       	rjmp	.+248    	; 0x3f8a <main+0x18a>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    3e92:	86 35       	cpi	r24, 0x56	; 86
    3e94:	29 f4       	brne	.+10     	; 0x3ea0 <main+0xa0>
      // UNIVERSAL command is ignored
      getNch(4);
    3e96:	84 e0       	ldi	r24, 0x04	; 4
    3e98:	a4 d0       	rcall	.+328    	; 0x3fe2 <verifySpace+0xc>
      putch(0x00);
    3e9a:	80 e0       	ldi	r24, 0x00	; 0
    3e9c:	7a d0       	rcall	.+244    	; 0x3f92 <putch>
    3e9e:	76 c0       	rjmp	.+236    	; 0x3f8c <main+0x18c>
    }
    /* Write memory, length is big endian and is in bytes  */
    else if(ch == STK_PROG_PAGE) {
    3ea0:	84 36       	cpi	r24, 0x64	; 100
    3ea2:	09 f0       	breq	.+2      	; 0x3ea6 <main+0xa6>
    3ea4:	4c c0       	rjmp	.+152    	; 0x3f3e <main+0x13e>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getLen();
    3ea6:	87 d0       	rcall	.+270    	; 0x3fb6 <getLen>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    3ea8:	e0 91 00 02 	lds	r30, 0x0200
    3eac:	f0 91 01 02 	lds	r31, 0x0201
    3eb0:	88 e3       	ldi	r24, 0x38	; 56
    3eb2:	e0 30       	cpi	r30, 0x00	; 0
    3eb4:	f8 07       	cpc	r31, r24
    3eb6:	10 f4       	brcc	.+4      	; 0x3ebc <main+0xbc>
    3eb8:	f7 be       	out	0x37, r15	; 55
    3eba:	e8 95       	spm
    3ebc:	c0 e0       	ldi	r28, 0x00	; 0
    3ebe:	d1 e0       	ldi	r29, 0x01	; 1
      
      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    3ec0:	70 d0       	rcall	.+224    	; 0x3fa2 <getch>
    3ec2:	89 93       	st	Y+, r24
      while (--length);
    3ec4:	80 91 02 02 	lds	r24, 0x0202
    3ec8:	81 50       	subi	r24, 0x01	; 1
    3eca:	80 93 02 02 	sts	0x0202, r24
    3ece:	88 23       	and	r24, r24
    3ed0:	b9 f7       	brne	.-18     	; 0x3ec0 <main+0xc0>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    3ed2:	e0 91 00 02 	lds	r30, 0x0200
    3ed6:	f0 91 01 02 	lds	r31, 0x0201
    3eda:	88 e3       	ldi	r24, 0x38	; 56
    3edc:	e0 30       	cpi	r30, 0x00	; 0
    3ede:	f8 07       	cpc	r31, r24
    3ee0:	10 f0       	brcs	.+4      	; 0x3ee6 <main+0xe6>
    3ee2:	f7 be       	out	0x37, r15	; 55
    3ee4:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    3ee6:	77 d0       	rcall	.+238    	; 0x3fd6 <verifySpace>
      
      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    3ee8:	07 b6       	in	r0, 0x37	; 55
    3eea:	00 fc       	sbrc	r0, 0
    3eec:	fd cf       	rjmp	.-6      	; 0x3ee8 <main+0xe8>
      }
#endif

      // Copy buffer into programming buffer
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
    3eee:	40 91 00 02 	lds	r20, 0x0200
    3ef2:	50 91 01 02 	lds	r21, 0x0201
    3ef6:	a0 e0       	ldi	r26, 0x00	; 0
    3ef8:	b1 e0       	ldi	r27, 0x01	; 1
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    3efa:	2c 91       	ld	r18, X
    3efc:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    3efe:	11 96       	adiw	r26, 0x01	; 1
    3f00:	8c 91       	ld	r24, X
    3f02:	11 97       	sbiw	r26, 0x01	; 1
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	98 2f       	mov	r25, r24
    3f08:	88 27       	eor	r24, r24
    3f0a:	82 2b       	or	r24, r18
    3f0c:	93 2b       	or	r25, r19
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    3f0e:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    3f10:	fa 01       	movw	r30, r20
    3f12:	0c 01       	movw	r0, r24
    3f14:	c7 be       	out	0x37, r12	; 55
    3f16:	e8 95       	spm
    3f18:	11 24       	eor	r1, r1
        addrPtr += 2;
    3f1a:	4e 5f       	subi	r20, 0xFE	; 254
    3f1c:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    3f1e:	f1 e0       	ldi	r31, 0x01	; 1
    3f20:	a0 38       	cpi	r26, 0x80	; 128
    3f22:	bf 07       	cpc	r27, r31
    3f24:	51 f7       	brne	.-44     	; 0x3efa <main+0xfa>
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    3f26:	e0 91 00 02 	lds	r30, 0x0200
    3f2a:	f0 91 01 02 	lds	r31, 0x0201
    3f2e:	e7 be       	out	0x37, r14	; 55
    3f30:	e8 95       	spm
      boot_spm_busy_wait();
    3f32:	07 b6       	in	r0, 0x37	; 55
    3f34:	00 fc       	sbrc	r0, 0
    3f36:	fd cf       	rjmp	.-6      	; 0x3f32 <main+0x132>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    3f38:	d7 be       	out	0x37, r13	; 55
    3f3a:	e8 95       	spm
    3f3c:	27 c0       	rjmp	.+78     	; 0x3f8c <main+0x18c>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    3f3e:	84 37       	cpi	r24, 0x74	; 116
    3f40:	b9 f4       	brne	.+46     	; 0x3f70 <main+0x170>
      // READ PAGE - we only read flash
      getLen();
    3f42:	39 d0       	rcall	.+114    	; 0x3fb6 <getLen>
      verifySpace();
    3f44:	48 d0       	rcall	.+144    	; 0x3fd6 <verifySpace>
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    3f46:	e0 91 00 02 	lds	r30, 0x0200
    3f4a:	f0 91 01 02 	lds	r31, 0x0201
    3f4e:	31 96       	adiw	r30, 0x01	; 1
    3f50:	f0 93 01 02 	sts	0x0201, r31
    3f54:	e0 93 00 02 	sts	0x0200, r30
    3f58:	31 97       	sbiw	r30, 0x01	; 1
    3f5a:	e4 91       	lpm	r30, Z+
    3f5c:	8e 2f       	mov	r24, r30
    3f5e:	19 d0       	rcall	.+50     	; 0x3f92 <putch>
      while (--length);
    3f60:	80 91 02 02 	lds	r24, 0x0202
    3f64:	81 50       	subi	r24, 0x01	; 1
    3f66:	80 93 02 02 	sts	0x0202, r24
    3f6a:	88 23       	and	r24, r24
    3f6c:	61 f7       	brne	.-40     	; 0x3f46 <main+0x146>
    3f6e:	0e c0       	rjmp	.+28     	; 0x3f8c <main+0x18c>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    3f70:	85 37       	cpi	r24, 0x75	; 117
    3f72:	39 f4       	brne	.+14     	; 0x3f82 <main+0x182>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    3f74:	30 d0       	rcall	.+96     	; 0x3fd6 <verifySpace>
      putch(SIGNATURE_0);
    3f76:	8e e1       	ldi	r24, 0x1E	; 30
    3f78:	0c d0       	rcall	.+24     	; 0x3f92 <putch>
      putch(SIGNATURE_1);
    3f7a:	84 e9       	ldi	r24, 0x94	; 148
    3f7c:	0a d0       	rcall	.+20     	; 0x3f92 <putch>
      putch(SIGNATURE_2);
    3f7e:	86 e0       	ldi	r24, 0x06	; 6
    3f80:	8d cf       	rjmp	.-230    	; 0x3e9c <main+0x9c>
    }
    else if (ch == 'Q') {
    3f82:	81 35       	cpi	r24, 0x51	; 81
    3f84:	11 f4       	brne	.+4      	; 0x3f8a <main+0x18a>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    3f86:	88 e0       	ldi	r24, 0x08	; 8
    3f88:	1b d0       	rcall	.+54     	; 0x3fc0 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    3f8a:	25 d0       	rcall	.+74     	; 0x3fd6 <verifySpace>
    }
    putch(STK_OK);
    3f8c:	80 e1       	ldi	r24, 0x10	; 16
    3f8e:	01 d0       	rcall	.+2      	; 0x3f92 <putch>
    3f90:	5e cf       	rjmp	.-324    	; 0x3e4e <main+0x4e>

00003f92 <putch>:
  }
}

void putch(char ch) {
    3f92:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    3f94:	80 91 c0 00 	lds	r24, 0x00C0
    3f98:	85 ff       	sbrs	r24, 5
    3f9a:	fc cf       	rjmp	.-8      	; 0x3f94 <putch+0x2>
  UDR0 = ch;
    3f9c:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    3fa0:	08 95       	ret

00003fa2 <getch>:
  return getch();
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3fa2:	a8 95       	wdr
  uint8_t ch;

  watchdogReset();

#ifdef LED_DATA_FLASH
  LED_PIN |= _BV(LED);
    3fa4:	1d 9a       	sbi	0x03, 5	; 3
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)));
    3fa6:	80 91 c0 00 	lds	r24, 0x00C0
    3faa:	87 ff       	sbrs	r24, 7
    3fac:	fc cf       	rjmp	.-8      	; 0x3fa6 <getch+0x4>
  ch = UDR0;
    3fae:	80 91 c6 00 	lds	r24, 0x00C6
#endif

#ifdef LED_DATA_FLASH
  LED_PIN |= _BV(LED);
    3fb2:	1d 9a       	sbi	0x03, 5	; 3
#endif

  return ch;
}
    3fb4:	08 95       	ret

00003fb6 <getLen>:
  } while (--count);
}
#endif

uint8_t getLen() {
  getch();
    3fb6:	f5 df       	rcall	.-22     	; 0x3fa2 <getch>
  length = getch();
    3fb8:	f4 df       	rcall	.-24     	; 0x3fa2 <getch>
    3fba:	80 93 02 02 	sts	0x0202, r24
  return getch();
}
    3fbe:	f1 cf       	rjmp	.-30     	; 0x3fa2 <getch>

00003fc0 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3fc0:	e0 e6       	ldi	r30, 0x60	; 96
    3fc2:	f0 e0       	ldi	r31, 0x00	; 0
    3fc4:	98 e1       	ldi	r25, 0x18	; 24
    3fc6:	90 83       	st	Z, r25
  WDTCSR = x;
    3fc8:	80 83       	st	Z, r24
}
    3fca:	08 95       	ret

00003fcc <appStart>:

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    3fcc:	80 e0       	ldi	r24, 0x00	; 0
    3fce:	f8 df       	rcall	.-16     	; 0x3fc0 <watchdogConfig>
  __asm__ __volatile__ (
    3fd0:	ee 27       	eor	r30, r30
    3fd2:	ff 27       	eor	r31, r31
    3fd4:	09 94       	ijmp

00003fd6 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) appStart();
    3fd6:	e5 df       	rcall	.-54     	; 0x3fa2 <getch>
    3fd8:	80 32       	cpi	r24, 0x20	; 32
    3fda:	09 f0       	breq	.+2      	; 0x3fde <verifySpace+0x8>
    3fdc:	f7 df       	rcall	.-18     	; 0x3fcc <appStart>
  putch(STK_INSYNC);
    3fde:	84 e1       	ldi	r24, 0x14	; 20
}
    3fe0:	d8 cf       	rjmp	.-80     	; 0x3f92 <putch>
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    3fe2:	1f 93       	push	r17
    3fe4:	18 2f       	mov	r17, r24

00003fe6 <getNch>:
  do getch(); while (--count);
    3fe6:	dd df       	rcall	.-70     	; 0x3fa2 <getch>
    3fe8:	11 50       	subi	r17, 0x01	; 1
    3fea:	e9 f7       	brne	.-6      	; 0x3fe6 <getNch>
  verifySpace();
    3fec:	f4 df       	rcall	.-24     	; 0x3fd6 <verifySpace>
}
    3fee:	1f 91       	pop	r17
    3ff0:	08 95       	ret
