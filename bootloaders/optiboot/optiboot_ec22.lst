
optiboot_ec22.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ec  00003e00  00003e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000006a  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000236  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000178  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003d5  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000125  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001ce  00000000  00000000  00000c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000080  00000000  00000000  00000ddb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003e00 <main>:
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    3e00:	82 e0       	ldi	r24, 0x02	; 2
    3e02:	80 93 c0 00 	sts	0x00C0, r24
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
#endif
#ifndef SOFT_UART
  UCSR0A = _BV(U2X0); //Double speed mode USART0
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    3e06:	88 e1       	ldi	r24, 0x18	; 24
    3e08:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    3e0c:	86 e0       	ldi	r24, 0x06	; 6
    3e0e:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    3e12:	80 e1       	ldi	r24, 0x10	; 16
    3e14:	80 93 c4 00 	sts	0x00C4, r24
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    3e18:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    3e1a:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
    3e1c:	81 ff       	sbrs	r24, 1
    3e1e:	d3 d0       	rcall	.+422    	; 0x3fc6 <appStart>

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_500MS);
    3e20:	8d e0       	ldi	r24, 0x0D	; 13
    3e22:	cb d0       	rcall	.+406    	; 0x3fba <watchdogConfig>

#if defined(EXTRUDER_CONTROLLER_V22)
  // Bring MOSFETs low before too much time has passed
  PORTB &= ~_BV(3) & ~_BV(4);
    3e24:	85 b1       	in	r24, 0x05	; 5
    3e26:	87 7e       	andi	r24, 0xE7	; 231
    3e28:	85 b9       	out	0x05, r24	; 5
  DDRB |= _BV(3) | _BV(4) | /* LED pin: */_BV(5);
    3e2a:	84 b1       	in	r24, 0x04	; 4
    3e2c:	88 63       	ori	r24, 0x38	; 56
    3e2e:	84 b9       	out	0x04, r24	; 4
  PORTC &= ~_BV(1);
    3e30:	41 98       	cbi	0x08, 1	; 8
  DDRC |= _BV(1);
    3e32:	39 9a       	sbi	0x07, 1	; 7
  DDRD &= ~_BV(PIND0);
    3e34:	50 98       	cbi	0x0a, 0	; 10

  /* Enable internal pull-up resistor on pin D0 (RX), in order
  to supress line noise that prevents the bootloader from
  timing out (DAM: 20070509) */
#if !defined(NO_RX_PULLUP)
  PORTD |= _BV(PIND0);
    3e36:	58 9a       	sbi	0x0b, 0	; 11
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    3e38:	cc 24       	eor	r12, r12
    3e3a:	c3 94       	inc	r12
        addrPtr += 2;
      } while (--ch);
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    3e3c:	b5 e0       	ldi	r27, 0x05	; 5
    3e3e:	eb 2e       	mov	r14, r27
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    3e40:	a1 e1       	ldi	r26, 0x11	; 17
    3e42:	da 2e       	mov	r13, r26
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    3e44:	f3 e0       	ldi	r31, 0x03	; 3
    3e46:	ff 2e       	mov	r15, r31
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    3e48:	a9 d0       	rcall	.+338    	; 0x3f9c <getch>

    if(ch == STK_GET_PARAMETER) {
    3e4a:	81 34       	cpi	r24, 0x41	; 65
    3e4c:	21 f4       	brne	.+8      	; 0x3e56 <main+0x56>
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	c5 d0       	rcall	.+394    	; 0x3fdc <verifySpace+0xc>
      putch(0x03);
    3e52:	83 e0       	ldi	r24, 0x03	; 3
    3e54:	20 c0       	rjmp	.+64     	; 0x3e96 <main+0x96>
    }
    else if(ch == STK_SET_DEVICE) {
    3e56:	82 34       	cpi	r24, 0x42	; 66
    3e58:	11 f4       	brne	.+4      	; 0x3e5e <main+0x5e>
      // SET DEVICE is ignored
      getNch(20);
    3e5a:	84 e1       	ldi	r24, 0x14	; 20
    3e5c:	03 c0       	rjmp	.+6      	; 0x3e64 <main+0x64>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    3e5e:	85 34       	cpi	r24, 0x45	; 69
    3e60:	19 f4       	brne	.+6      	; 0x3e68 <main+0x68>
      // SET DEVICE EXT is ignored
      getNch(5);
    3e62:	85 e0       	ldi	r24, 0x05	; 5
    3e64:	bb d0       	rcall	.+374    	; 0x3fdc <verifySpace+0xc>
    3e66:	8f c0       	rjmp	.+286    	; 0x3f86 <main+0x186>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    3e68:	85 35       	cpi	r24, 0x55	; 85
    3e6a:	81 f4       	brne	.+32     	; 0x3e8c <main+0x8c>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    3e6c:	97 d0       	rcall	.+302    	; 0x3f9c <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    3e6e:	08 2f       	mov	r16, r24
    3e70:	10 e0       	ldi	r17, 0x00	; 0
    3e72:	94 d0       	rcall	.+296    	; 0x3f9c <getch>
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	98 2f       	mov	r25, r24
    3e78:	88 27       	eor	r24, r24
    3e7a:	80 2b       	or	r24, r16
    3e7c:	91 2b       	or	r25, r17
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    3e7e:	88 0f       	add	r24, r24
    3e80:	99 1f       	adc	r25, r25
      address = newAddress;
    3e82:	90 93 01 02 	sts	0x0201, r25
    3e86:	80 93 00 02 	sts	0x0200, r24
    3e8a:	7c c0       	rjmp	.+248    	; 0x3f84 <main+0x184>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    3e8c:	86 35       	cpi	r24, 0x56	; 86
    3e8e:	29 f4       	brne	.+10     	; 0x3e9a <main+0x9a>
      // UNIVERSAL command is ignored
      getNch(4);
    3e90:	84 e0       	ldi	r24, 0x04	; 4
    3e92:	a4 d0       	rcall	.+328    	; 0x3fdc <verifySpace+0xc>
      putch(0x00);
    3e94:	80 e0       	ldi	r24, 0x00	; 0
    3e96:	7a d0       	rcall	.+244    	; 0x3f8c <putch>
    3e98:	76 c0       	rjmp	.+236    	; 0x3f86 <main+0x186>
    }
    /* Write memory, length is big endian and is in bytes  */
    else if(ch == STK_PROG_PAGE) {
    3e9a:	84 36       	cpi	r24, 0x64	; 100
    3e9c:	09 f0       	breq	.+2      	; 0x3ea0 <main+0xa0>
    3e9e:	4c c0       	rjmp	.+152    	; 0x3f38 <main+0x138>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getLen();
    3ea0:	87 d0       	rcall	.+270    	; 0x3fb0 <getLen>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    3ea2:	e0 91 00 02 	lds	r30, 0x0200
    3ea6:	f0 91 01 02 	lds	r31, 0x0201
    3eaa:	88 e3       	ldi	r24, 0x38	; 56
    3eac:	e0 30       	cpi	r30, 0x00	; 0
    3eae:	f8 07       	cpc	r31, r24
    3eb0:	10 f4       	brcc	.+4      	; 0x3eb6 <main+0xb6>
    3eb2:	f7 be       	out	0x37, r15	; 55
    3eb4:	e8 95       	spm
    3eb6:	c0 e0       	ldi	r28, 0x00	; 0
    3eb8:	d1 e0       	ldi	r29, 0x01	; 1
      
      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    3eba:	70 d0       	rcall	.+224    	; 0x3f9c <getch>
    3ebc:	89 93       	st	Y+, r24
      while (--length);
    3ebe:	80 91 02 02 	lds	r24, 0x0202
    3ec2:	81 50       	subi	r24, 0x01	; 1
    3ec4:	80 93 02 02 	sts	0x0202, r24
    3ec8:	88 23       	and	r24, r24
    3eca:	b9 f7       	brne	.-18     	; 0x3eba <main+0xba>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    3ecc:	e0 91 00 02 	lds	r30, 0x0200
    3ed0:	f0 91 01 02 	lds	r31, 0x0201
    3ed4:	88 e3       	ldi	r24, 0x38	; 56
    3ed6:	e0 30       	cpi	r30, 0x00	; 0
    3ed8:	f8 07       	cpc	r31, r24
    3eda:	10 f0       	brcs	.+4      	; 0x3ee0 <main+0xe0>
    3edc:	f7 be       	out	0x37, r15	; 55
    3ede:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    3ee0:	77 d0       	rcall	.+238    	; 0x3fd0 <verifySpace>
      
      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    3ee2:	07 b6       	in	r0, 0x37	; 55
    3ee4:	00 fc       	sbrc	r0, 0
    3ee6:	fd cf       	rjmp	.-6      	; 0x3ee2 <main+0xe2>
      }
#endif

      // Copy buffer into programming buffer
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
    3ee8:	40 91 00 02 	lds	r20, 0x0200
    3eec:	50 91 01 02 	lds	r21, 0x0201
    3ef0:	a0 e0       	ldi	r26, 0x00	; 0
    3ef2:	b1 e0       	ldi	r27, 0x01	; 1
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    3ef4:	2c 91       	ld	r18, X
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    3ef8:	11 96       	adiw	r26, 0x01	; 1
    3efa:	8c 91       	ld	r24, X
    3efc:	11 97       	sbiw	r26, 0x01	; 1
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	98 2f       	mov	r25, r24
    3f02:	88 27       	eor	r24, r24
    3f04:	82 2b       	or	r24, r18
    3f06:	93 2b       	or	r25, r19
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    3f08:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    3f0a:	fa 01       	movw	r30, r20
    3f0c:	0c 01       	movw	r0, r24
    3f0e:	c7 be       	out	0x37, r12	; 55
    3f10:	e8 95       	spm
    3f12:	11 24       	eor	r1, r1
        addrPtr += 2;
    3f14:	4e 5f       	subi	r20, 0xFE	; 254
    3f16:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    3f18:	f1 e0       	ldi	r31, 0x01	; 1
    3f1a:	a0 38       	cpi	r26, 0x80	; 128
    3f1c:	bf 07       	cpc	r27, r31
    3f1e:	51 f7       	brne	.-44     	; 0x3ef4 <main+0xf4>
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    3f20:	e0 91 00 02 	lds	r30, 0x0200
    3f24:	f0 91 01 02 	lds	r31, 0x0201
    3f28:	e7 be       	out	0x37, r14	; 55
    3f2a:	e8 95       	spm
      boot_spm_busy_wait();
    3f2c:	07 b6       	in	r0, 0x37	; 55
    3f2e:	00 fc       	sbrc	r0, 0
    3f30:	fd cf       	rjmp	.-6      	; 0x3f2c <main+0x12c>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    3f32:	d7 be       	out	0x37, r13	; 55
    3f34:	e8 95       	spm
    3f36:	27 c0       	rjmp	.+78     	; 0x3f86 <main+0x186>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    3f38:	84 37       	cpi	r24, 0x74	; 116
    3f3a:	b9 f4       	brne	.+46     	; 0x3f6a <main+0x16a>
      // READ PAGE - we only read flash
      getLen();
    3f3c:	39 d0       	rcall	.+114    	; 0x3fb0 <getLen>
      verifySpace();
    3f3e:	48 d0       	rcall	.+144    	; 0x3fd0 <verifySpace>
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    3f40:	e0 91 00 02 	lds	r30, 0x0200
    3f44:	f0 91 01 02 	lds	r31, 0x0201
    3f48:	31 96       	adiw	r30, 0x01	; 1
    3f4a:	f0 93 01 02 	sts	0x0201, r31
    3f4e:	e0 93 00 02 	sts	0x0200, r30
    3f52:	31 97       	sbiw	r30, 0x01	; 1
    3f54:	e4 91       	lpm	r30, Z+
    3f56:	8e 2f       	mov	r24, r30
    3f58:	19 d0       	rcall	.+50     	; 0x3f8c <putch>
      while (--length);
    3f5a:	80 91 02 02 	lds	r24, 0x0202
    3f5e:	81 50       	subi	r24, 0x01	; 1
    3f60:	80 93 02 02 	sts	0x0202, r24
    3f64:	88 23       	and	r24, r24
    3f66:	61 f7       	brne	.-40     	; 0x3f40 <main+0x140>
    3f68:	0e c0       	rjmp	.+28     	; 0x3f86 <main+0x186>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    3f6a:	85 37       	cpi	r24, 0x75	; 117
    3f6c:	39 f4       	brne	.+14     	; 0x3f7c <main+0x17c>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    3f6e:	30 d0       	rcall	.+96     	; 0x3fd0 <verifySpace>
      putch(SIGNATURE_0);
    3f70:	8e e1       	ldi	r24, 0x1E	; 30
    3f72:	0c d0       	rcall	.+24     	; 0x3f8c <putch>
      putch(SIGNATURE_1);
    3f74:	84 e9       	ldi	r24, 0x94	; 148
    3f76:	0a d0       	rcall	.+20     	; 0x3f8c <putch>
      putch(SIGNATURE_2);
    3f78:	86 e0       	ldi	r24, 0x06	; 6
    3f7a:	8d cf       	rjmp	.-230    	; 0x3e96 <main+0x96>
    }
    else if (ch == 'Q') {
    3f7c:	81 35       	cpi	r24, 0x51	; 81
    3f7e:	11 f4       	brne	.+4      	; 0x3f84 <main+0x184>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    3f80:	88 e0       	ldi	r24, 0x08	; 8
    3f82:	1b d0       	rcall	.+54     	; 0x3fba <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    3f84:	25 d0       	rcall	.+74     	; 0x3fd0 <verifySpace>
    }
    putch(STK_OK);
    3f86:	80 e1       	ldi	r24, 0x10	; 16
    3f88:	01 d0       	rcall	.+2      	; 0x3f8c <putch>
    3f8a:	5e cf       	rjmp	.-324    	; 0x3e48 <main+0x48>

00003f8c <putch>:
  }
}

void putch(char ch) {
    3f8c:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    3f8e:	80 91 c0 00 	lds	r24, 0x00C0
    3f92:	85 ff       	sbrs	r24, 5
    3f94:	fc cf       	rjmp	.-8      	; 0x3f8e <putch+0x2>
  UDR0 = ch;
    3f96:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    3f9a:	08 95       	ret

00003f9c <getch>:
  return getch();
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3f9c:	a8 95       	wdr
  uint8_t ch;

  watchdogReset();

#ifdef LED_DATA_FLASH
  LED_PIN |= _BV(LED);
    3f9e:	1d 9a       	sbi	0x03, 5	; 3
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)));
    3fa0:	80 91 c0 00 	lds	r24, 0x00C0
    3fa4:	87 ff       	sbrs	r24, 7
    3fa6:	fc cf       	rjmp	.-8      	; 0x3fa0 <getch+0x4>
  ch = UDR0;
    3fa8:	80 91 c6 00 	lds	r24, 0x00C6
#endif

#ifdef LED_DATA_FLASH
  LED_PIN |= _BV(LED);
    3fac:	1d 9a       	sbi	0x03, 5	; 3
#endif

  return ch;
}
    3fae:	08 95       	ret

00003fb0 <getLen>:
  } while (--count);
}
#endif

uint8_t getLen() {
  getch();
    3fb0:	f5 df       	rcall	.-22     	; 0x3f9c <getch>
  length = getch();
    3fb2:	f4 df       	rcall	.-24     	; 0x3f9c <getch>
    3fb4:	80 93 02 02 	sts	0x0202, r24
  return getch();
}
    3fb8:	f1 cf       	rjmp	.-30     	; 0x3f9c <getch>

00003fba <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3fba:	e0 e6       	ldi	r30, 0x60	; 96
    3fbc:	f0 e0       	ldi	r31, 0x00	; 0
    3fbe:	98 e1       	ldi	r25, 0x18	; 24
    3fc0:	90 83       	st	Z, r25
  WDTCSR = x;
    3fc2:	80 83       	st	Z, r24
}
    3fc4:	08 95       	ret

00003fc6 <appStart>:

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    3fc6:	80 e0       	ldi	r24, 0x00	; 0
    3fc8:	f8 df       	rcall	.-16     	; 0x3fba <watchdogConfig>
  __asm__ __volatile__ (
    3fca:	ee 27       	eor	r30, r30
    3fcc:	ff 27       	eor	r31, r31
    3fce:	09 94       	ijmp

00003fd0 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) appStart();
    3fd0:	e5 df       	rcall	.-54     	; 0x3f9c <getch>
    3fd2:	80 32       	cpi	r24, 0x20	; 32
    3fd4:	09 f0       	breq	.+2      	; 0x3fd8 <verifySpace+0x8>
    3fd6:	f7 df       	rcall	.-18     	; 0x3fc6 <appStart>
  putch(STK_INSYNC);
    3fd8:	84 e1       	ldi	r24, 0x14	; 20
}
    3fda:	d8 cf       	rjmp	.-80     	; 0x3f8c <putch>
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    3fdc:	1f 93       	push	r17
    3fde:	18 2f       	mov	r17, r24

00003fe0 <getNch>:
  do getch(); while (--count);
    3fe0:	dd df       	rcall	.-70     	; 0x3f9c <getch>
    3fe2:	11 50       	subi	r17, 0x01	; 1
    3fe4:	e9 f7       	brne	.-6      	; 0x3fe0 <getNch>
  verifySpace();
    3fe6:	f4 df       	rcall	.-24     	; 0x3fd0 <verifySpace>
}
    3fe8:	1f 91       	pop	r17
    3fea:	08 95       	ret
